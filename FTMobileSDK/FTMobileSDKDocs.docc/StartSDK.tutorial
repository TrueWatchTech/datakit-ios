@Tutorial(time: 20) {
    @Intro(title: "SDK Configuration") {
        Basic configuration, Trace configuration, RUM configuration, Logger configuration
        
        
        @Image(source: rum_access, alt: "SSS")
    }
    
    @Section(title: "Basic Configuration") {
        @ContentAndMedia {
            
            Configure through ``FTMobileSDK/FTMobileConfig``.

            
            @Image(source: rum_access, alt: "accessible description")
        }
        
        @Steps {
            @Step {
                SDK FTMobileConfig Basic Configuration
                
                Configure basic configuration items when starting the SDK. The necessary configuration items 
                include the FT-GateWay metrics write address. The SDK must be initialized in the main thread, 
                otherwise unpredictable problems may occur (such as losing launch events).
                @Code(name: "AppDelegate.swift", file: startsdk_section1_step1.swift)
            }
            
            @Step {
                Configure whether to allow SDK to print Debug logs
                
                When enabled, the console will output log information printed internally by the SDK.
                @Code(name: "AppDelegate.swift", file: startsdk_section1_step2.swift,previousFile:startsdk_section1_step1.swift){
                    @Image(source:enableSDKDebugLog, alt:"enableSDKDebugLog set to true")
                }
            }
            @Step {
                Configure environment field, default value is FTEnvProd
                
                View environment ``FTMobileSDK/FTEnv``
                @Code(name: "AppDelegate.swift", file: startsdk_section1_step3.swift,previousFile:startsdk_section1_step2.swift)
            }
            @Step {
                Set SDK global tags
               
                Reserved tags: sdk_package_flutter, sdk_package_react_native
                @Code(name: "AppDelegate.swift", file: startsdk_section1_step4.swift,previousFile:startsdk_section1_step3.swift)
            }
            @Step {
                Set service name
                               
                @Code(name: "AppDelegate.swift", file: startsdk_section1_step5.swift,previousFile:startsdk_section1_step4.swift)
            }
            @Step {
                Enable SDK
                
                @Code(name: "AppDelegate.swift", file: startsdk_section1_step6.swift,previousFile:startsdk_section1_step5.swift)
            }
        }
    }
    
    @Section(title: "RUM Function Configuration") {
        @ContentAndMedia {
            After the application user access data is collected by the "Observability Cloud", you can customize the configuration scenario through the "Observability Cloud" console to visualize and analyze the application user access situation data.
   
            Configure through ``FTMobileSDK/FTRumConfig``.

            
            @Image(source: ios_overview, alt: "ios overview")
        }
        @Steps {
            
            @Step {
                RUM Basic Configuration, set appid application unique ID, after setting rum data can be reported normally
                
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step1.swift,previousFile:startsdk_section1_step6.swift)
            }
            
            @Step {
                Sample rate configuration
                
                Can be set to 0-100, 100 means 100% collection, no data compression, is session level, when not sampled, view, action, resource etc. are not collected
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step2.swift,previousFile:startsdk_section2_step1.swift)
            }
            @Step {
                Configure whether to automatically collect View, Action, Resource data
                
                Note: Action and Resource data are bound to View. If View is not automatically collected or manually collected, Action and Resource data cannot be correctly written.
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step3.swift,previousFile:startsdk_section2_step2.swift)
            }
            @Step {
                Configure whether to collect crash logs and device information for monitoring
             
                View monitoring configuration ``FTMobileSDK/FTErrorMonitorType``
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step4.swift,previousFile:startsdk_section2_step3.swift)
            }
            @Step {
                Configure whether to collect Long Task
             
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step5.swift,previousFile:startsdk_section2_step4.swift)
            }
            @Step {
                Configure monitoring type and monitoring cycle, if not set, monitoring will not be enabled
             
                View monitoring item type ``FTMobileSDK/FTDeviceMetricsMonitorType``
                Monitoring item cycle ``FTMobileSDK/FTMonitorFrequency``
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step6.swift,previousFile:startsdk_section2_step5.swift)
            }
            @Step {
                Set RUM global tags
                
                Reserved tags: special key - track_id (for tracking function)
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step7.swift,previousFile:startsdk_section2_step6.swift)
            }
            @Step {
                Enable RUM 
                
                @Code(name: "AppDelegate.swift", file: startsdk_section2_step8.swift,previousFile:startsdk_section2_step7.swift)
            }
        }
    }
    @Section(title: "Logger Function Configuration"){
        @ContentAndMedia {
           After log data is collected by "Observability Cloud", you can view all log content in the "Observability Cloud" console through "Log".
        
           Configure through ``FTMobileSDK/FTLoggerConfig``.            
                
         @Image(source: logger, alt: "logger")
        }
        @Steps {           
          @Step {
               Set log discard strategy
              
               View discard strategy ``FTMobileSDK/FTLogCacheDiscard``
              @Code(name: "AppDelegate.swift", file: startsdk_section3_step1.swift,previousFile:startsdk_section2_step8.swift)
           }
          @Step {
               Configure whether to collect custom logs, default is NO
              
               Custom log usage <doc:CustomLog>
              @Code(name: "AppDelegate.swift", file: startsdk_section3_step2.swift,previousFile:startsdk_section3_step1.swift)
           }
          @Step {
               Set log collection condition configuration
              
              @Code(name: "AppDelegate.swift", file: startsdk_section3_step3.swift,previousFile:startsdk_section3_step2.swift)
           }
          @Step {
               Set logger data and rum association
              
              @Code(name: "AppDelegate.swift", file: startsdk_section3_step4.swift,previousFile:startsdk_section3_step3.swift)
           }
          @Step {
              logger global tags
              
              @Code(name: "AppDelegate.swift", file: startsdk_section3_step5.swift,previousFile:startsdk_section3_step4.swift)
           }
          @Step {
               Whether to print custom logs to the console
              
              @Code(name: "AppDelegate.swift", file: startsdk_section3_step6.swift,previousFile:startsdk_section3_step5.swift)
           }
          @Step {
               Start logger
              
              @Code(name: "AppDelegate.swift", file: startsdk_section3_step7.swift,previousFile:startsdk_section3_step6.swift)
           }
        }
    }
    @Section(title: "Trace Function Configuration"){
        @ContentAndMedia {
         "Observability Cloud" link data collection currently supports collectors using the Opentracing protocol, such as DDTrace, Apache Jaeger, OpenTelemetry, Skywalking, Zipkin, etc.
        
           Configure through ``FTMobileSDK/FTTraceConfig``.            
                
         @Image(source: trace, alt: "trace")
        }
        @Steps {
          @Step {
               Configure whether to enable automatic http trace
              
              @Code(name: "AppDelegate.swift", file: startsdk_section4_step1.swift,previousFile:startsdk_section3_step7.swift)
           }
          @Step {
               Set sampling rate
            
              @Code(name: "AppDelegate.swift", file: startsdk_section4_step2.swift,previousFile:startsdk_section4_step2.swift)
           }
          @Step {
               Set link tracking type when collecting network request information
              
               Default link tracking type is DDtrace, view supported link types ``FTMobileSDK/FTNetworkTraceType``
              @Code(name: "AppDelegate.swift", file: startsdk_section4_step3.swift,previousFile:startsdk_section4_step2.swift)
           }
          @Step {
               Whether to associate Trace data with rum
              
               Only effective when FTNetworkTraceType is set to DDtrace
              @Code(name: "AppDelegate.swift", file: startsdk_section4_step4.swift,previousFile:startsdk_section4_step3.swift)
           }
          @Step {
               Enable Trace
              
              @Code(name: "AppDelegate.swift", file: startsdk_section4_step5.swift,previousFile:startsdk_section4_step4.swift)
           }
        }
    }
    @Assessments {
           @MultipleChoice {
               What data types can RUM be configured to automatically collect?

               @Choice(isCorrect: false) {
                   View, Action, Http Resource.

                   @Justification(reaction: "Try again!") {
                       Not just these!
                   }
               }
               @Choice(isCorrect: true) {
                   View, Action, Http Resource, Error, Long Task.

                   @Justification(reaction: "That's right!") {
                       Correct.
                   }
               }              
           } 
           @MultipleChoice {
                What type of Trace can support Trace data and rum association?

               @Choice(isCorrect: false) {
                   zipkin

                   @Justification(reaction: "Try again!") {
                       You can check the tutorial above👆
                   }
               }
               @Choice(isCorrect: true) {
                   datadog

                   @Justification(reaction: "That's right!") {
                       Correct.
                   }
               }  
               @Choice(isCorrect: false) {
                   traceparent, skywalking

                   @Justification(reaction: "Try again!") {
                       You can check the tutorial above👆
                   }
               } 
               @Choice(isCorrect: false) {
                   jaeger

                   @Justification(reaction: "Try again!") {
                       You can check the tutorial above👆
                   }
               } 
           }  
       }
}
